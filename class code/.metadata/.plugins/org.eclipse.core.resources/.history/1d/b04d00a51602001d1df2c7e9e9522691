package streamPractise;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import lesson9.exercise_3.Account;

public class DistinctAndSort {

	public static void main(String[] args) {
		List<String> words = Arrays.asList("Tom", "Joseph", "Richard", "Tom", "Joseph");
		
		// Distinct
		words.stream()
			 .distinct()
			 .collect(Collectors.toList())
			 .forEach(System.out::println);
		
		System.out.println();
		
		// Sorted
		List<String> list = Arrays.asList("Tom", "Joseph", "Richard");
		Function<String, Integer> byLength = x -> x.length();
		list.stream()
//			.sorted((x,y) -> y.length() - x.length()) // Sorting Length
//			.sorted(Comparator.comparing(String::length).reversed()) // More Functional Style
			.sorted(Comparator.comparing(byLength).reversed().thenComparing(byLength)) // more intuitively
			.collect(Collectors.toList())
			.forEach(System.out::println);
		
		List<Account> accounts = new ArrayList<Account>() {
			{
				add(new Account("Bob", 5000, 1001));
				add(new Account("Jim", 10000, 1002));
				add(new Account("Bruce", 5300, 1003));
				add(new Account("Li", 12000, 1004));
				add(new Account("Sam", 9000, 1005));
				add(new Account("Rick", 11000, 1006));
			}
		};
		
		//sorting code here
		List<Account> stream = accounts.stream()
				.sorted(Comparator.comparing(Account::getBalance).thenComparing(Account::getOwnerName))
				.collect(Collectors.toList());
		
		List<Account> sortedList = accounts.stream()
                .sorted(Comparator.comparing(Account::getBalance).thenComparing(Account::getOwnerName))
                .collect(Collectors.toList());
        sortedList.forEach(System.out::println);
	}
}
